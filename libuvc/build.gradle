apply plugin: 'com.android.library'

import org.apache.tools.ant.taskdefs.condition.Os

android {
	namespace 'com.oralvis.uvccamera'
	compileSdkVersion rootProject.ext.versionCompiler
	buildToolsVersion rootProject.ext.versionBuildTool

	compileOptions {
		sourceCompatibility rootProject.ext.javaSourceCompatibility
		targetCompatibility rootProject.ext.javaTargetCompatibility
	}

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
		targetSdkVersion rootProject.ext.versionTarget
    }

	lintOptions {
		checkReleaseBuilds false
		// Or, if you prefer, you can continue to check for errors in release builds,
		// but continue the build even when errors are found:
		abortOnError false
		// The demo app does not have translations.
		disable 'MissingTranslation'
	}

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

// Disable NDK build since we have precompiled libraries
// tasks.withType(JavaCompile) {
//	compileTask -> compileTask.dependsOn ndkBuild
// }

String getNdkBuildPath() {
	def ndkBuildingDir = System.getenv("NDK_HOME")
	if (ndkBuildingDir==null || ndkBuildingDir.isEmpty()) {
		// Try to get from gradle.properties first
		ndkBuildingDir = project.findProperty("ndk.dir")
		if (ndkBuildingDir==null || ndkBuildingDir.isEmpty()) {
			// Fallback to default Android SDK location
			ndkBuildingDir = "/Users/chaitanyskakde/Library/Android/sdk/ndk/26.3.11579264"
		}
	}
	def ndkBuildPath = ndkBuildingDir
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		ndkBuildPath = ndkBuildingDir + '/ndk-build.cmd'
	} else {
		ndkBuildPath = ndkBuildingDir + '/ndk-build'
	}
	return ndkBuildPath
}

// Disable NDK tasks since we have precompiled libraries
// task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
//	println('executing ndkBuild')
//	def ndkBuildPath = getNdkBuildPath();
//	commandLine ndkBuildPath, '-j8', '-C', file('src/main').absolutePath
// }

// task ndkClean(type: Exec, description: 'clean JNI libraries') {
//	println('executing ndkBuild clean')
//	def ndkBuildPath = getNdkBuildPath();
//	commandLine ndkBuildPath, 'clean', '-C', file('src/main').absolutePath
// }

// clean.dependsOn 'ndkClean'

dependencies {
    implementation fileTree(dir: new File(buildDir, 'libs'), include: '*.jar')
	implementation "androidx.appcompat:appcompat:${androidXVersion}"
	implementation 'com.elvishew:xlog:1.11.0'
	implementation project(path: ':libuvccommon')
}
